Chapter 1: SQL的基本应用




Lecture 1.1:
SQL: Structure Query Language (SQL) is a speicla purpose programming language.
Database: A container to help organize data / a way to efficiently store and retrieve data.

User --SQL---> Database

Why Learnin SQL:
I. At least 80% - 90% of data analysis work is to wrtie SQL query.
II. Almost every data-related job interviews will test SQL.
III. Most of candidates will fail SQL interviews although they have learned it by themselves.

Database ----------> Dataset    ------------------> Model
·Oracle              ·SAS dataset                   ·Regression
·AWS/Google          ·CSV                           ·Decision tree
                     ·txt       ------------------> Busnies Analysis 
                                                    ·Excel
                                                    ·Tableau





Lecture 1.2:

SQL Server Installation: MYSQLWorkbench




Lecture 1.3:

SQL Statement:

SELECT:（选择）
Ex. SELECT first_name, last_name FROM contacts;

INSERT: （插入）
Ex. INSERT INTO contacts(first_name, last_name)
        VALUES('Fritz', 'Onion');

UPDATE: （修改）
Ex. UPDATE contacts SET last_name = 'Ahern' WHERE id=1;

DELETE: （删除）
Ex. DELETE FROM contacts where id = 2;



SELECT(选择):

Ex. SELECT prod_id, prod_name, prod_price FROM Products;

Ex. SELECT * FROM Products; ---> effective but not recommended (read a huge amount of data)

Ex. SELECT * FROM Products limit 5; ---> limit the amount of data we select

Ex. SELECT DISTINCT vend_id FROM Products ---> avoid selecting repetitive vend_id data from database

Ex. SELECT DISTINCT vend_id, prod_id FROM Products ---> avoid selecting repetitive pairs of vend_id and prod_id from database



Comment(注释):

SELECT prod_id, prod_name, prod_price FROM Products  -- this is a comment

#This is also a comment

/* This is selecting mutiple lines
   as comments */










Chapter 2: SQL中的筛选和函数使用


Lecture 2.1:


Order从句进行column排序：

Order By Clause:  (default ascending sort order)

ORDER BY takes the name of one or more columns by which to sort the output.

Ex. SELECT prod_name FROM Products ORDER BY prod_name;  (sort by one single conlumn order)

Ex. SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name;  (sort by mutiple columns order)

Ex. SELECT prod_id, prod_price, prod_name FROM Products ORDER BY 2, 3;  (sort by relative position column)


降序排列：

Order by descending order:

SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC;


WHERE从句用于筛选数据：

Filter Data by using Where Clause: 

SELECT ---> FROM ----> WHERE ---> ORDER BY

Ex. SELECT prod_name, prod_price FROM Products WHERE prod_price = 3.49;

Ex. SELECT prod_name, prod_price FROM Products WHERE prod_price BETWEEN 5 AND 10; (inclusive)

Ex. SELECT * From Customers WHERE Cust_email is not NULL; ("is not NUll" refers to non-empty blank)

Ex. SELECT prod_name, prod_price FROM Products WHERE vend_id = 'DLL01" AND prod_price <= 4;





Lecture 2.2:

AND放在OR前面

SQL processes AND operators before OR operators.

Ex. SELECT prod_name, prod_price FROM Products WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >= 10;


IN用于代替多个OR

IN operators  ---> used to specify a range of conditions, any of which can be matched (equivalent to a series of "or")

Ex. SELECT prod_name, prod_price, vend_id FROM Products WHERE vend_id IN ('DLL01', 'BRS01'); 


Wildcard筛选（筛选类似数据

WildCard Filtering ---> can be only used with text fields (strings) 

1). '%' match any number of occurrences of any character （任意位置筛选）

Ex. SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE 'Fish%';

2). '_' macth a single character （固定长度筛选）

Ex. SELECT prod_id, prod_name FROM Products WHERE prod_name LIKE '__inch teddy bear';





Lecture 2.3: Create Calculated Fields


Rather than retrieve data as it is, what you really want is to retireve converted,
Calculated, or reformatted data directly from the database. 


Concatenating Fields: (组合列)

Ex. SELECT concat(vend_name, ' (', vend_country, ') ') FROM Vendors ORDER BY vend_name;

Aliases: (命名) 

Use Aliases to name the new calculated column 

Ex. SELECT concat(vend_name, ' (', vend_country, ') ') AS vend_title FROM Vendors ORDER BY vend_name;

Calculation: (计算)

Ex. SELECT quantity * item_price AS total_sales, prod_id, quantity, item_price FROM OrderItems WHERE order_num = 20008;



Use Data Manipulation Functions:

1. Extract part of a strings

UPPER() ---> Ex. SELECT vend_name, UPPER (vend_name) AS vend_name_uppercase FROM Vendors ORDER BY vend_name;

SUBSTRING() ---> Ex. SELECT vend_name, SUBSTRING(vend_name, 1, 4) AS first_4_letters_of_vend_name FROM Vendors ORDER BY vend_name;

2. Datatype converstion

YEAR() ---> Ex. SELECT order_num, order_date FROM Orders WHERE YEAR(order_date) = 2012;

NOW() ---> Ex. SELECT order_num, order_date, NOW() as currentdateandtime FROM Orders;

3. Get current date

curdate() ---> Return current date as a single column

datediff(curdate(), order_date) ---> Ex. SELECT order_num, order_date NOW() as currentdateandtime, curdate() as curdt, datediff(curdate(), order_date) as dategap FROM Orders;



CASE Expression: (control flow function)

It can be used to conditionally enter into some logic based on the status of a condition being satisfied. Conditions have to be mutually exclusive. 

CASE WHEN [value=compare_value] THEN result

Ex. SELECT prod_price,
        case when prod_price < 6 then 'low price'
	else 'high price'
	end as price_segment
    from Products;



Numeric Functions:

These are used to perform mathematical operations on numeric data, for example, returning absolute numbers and performing algebraic calculations. 

Ex. ABS(), COS(), EXP()....











Chapter 3: 数据的汇总


Lecture 3.1

Examples of Aggregate Functions

1). Determining the number of rows in a table; 
2). Obtaining the sum of a set of rows in a table;
3). Finding the highest, lowest, and average values in a table column


AVG(), COUNT(), MAX(), MIN(), SUM() only five aggregate functions in SQL  (Make sure only one column in the bracket)

AVG() Function - can be used to return the average value of any function:
        Ex.SELECT AVG(prod_price) AS avg_price FROM Products WHERE vend_id = 'DLL01';
        有空值的时候跳过空值，所以计算时的total number会有变化


COUNT() Function - can determine the number of rows in a table or the number of rows that match a specific criterion
        Ex. SELECT COUNT(*) AS num_cust FROM Customers;
        返回customer列表中所有的行数，包括null

        Ex. SELECT COUNT(cust_email) AS num_cust FROM Customers;
        返回cust_email中不包含null的行数

MAX() Function - return the highest value in a specified column;
        Ex. SELECT MAX(prod_price) AS max_price FROM Products;

MIN() Function - return the lowest value in a specified column;
        Ex. SELECT MIN(prod_price) AS min_price FROM Products;
        
        Columns with null values would be ignored.

SUM() Function - return the sum of the values in a specific column
        Ex. SELECT SUM(quantity) AS items_ordered FROM OrderItems WHERE order_num = 20005;
        返回一个column内所有值的和

        Ex. SELECT SUM(item_price*quantity) AS total_sales FROM OrderItems WHERE order_num = 20005;
        返回多个column计算的和


Aggregate on DISTINCT values:

Ex. SELECT COUNT(DISTINCT prod_price) AS count_price FROM Products WHERE vend_id = 'DLL01';

Ex. SELECT COUNT(DISTINCT vend_id) FROM Products;



WHEN DOING ANALYSIS:

IDENTYFY !!! ----
                1). how many records?                    
                2). whether there are missings?
                3). whether there are dup records?

Solution: SELECT
          COUNT(*)                                  //find records
          COUNT(vend_id)                            //find missing 
          COUNT(DISTINCT vend_id) FROM Products;    //find duplicates




Lecture 3.2

Groups are created using the GROUP BY clause in your SELECT statement

SELECT  vend_id,
        COUNT(*) AS num_prod
        FROM Products
        GROUP BY vend_id
        ORDER BY num_prods;


Sometimes we call non-aggregated columns as segmentation variables:

You can have more than one non-aggregated columns in SELECT statement, but make sure they are also in GROUP BY. 
select中的分类变量必须出现在group by里!!!

SELECT  order_num, prod_id,
        SUM(quantity)
        FROM OrderItems
        GROUP BY order_num, prod_id;

We can group by using relative position.

SELECT  order_num, prod_id,
        SUM(quantity)
        FROM OrderItems
        GROUP BY 1, 2;



Filter Group 

We have to use HAVING clause, instead of WHERE clause.

WHERE -- filter before data is grouped
HAVING -- filter after data is grouped

SELECT vend_id, COUNT(*) AS num_prods
        FROM Products
        WHERE prod_price >= 4
        GROUP BY vend_id
        HAVING COUNT(*) > 3;




Clause                          Description                             Required

SELECT                          Columns or expressions to be            YES
                                returned                

FROM                            Table to retrieve data from             Only if selecting data from a table

WHERE                           Row-level filtering                     No

GROUP BY                        Group Specification                     Only if calculating aggregates by group

HAVING                          Group-level filtering                   No

ORDER BY                        Output sort order                       No




Subquery -- queries that are embedded into other queries

SELECT cust_name, cust_contact
FROM Customers
WHERE cust_id IN (SELECT cust_id
                        FROM Orders
                        WHERE order_num IN (SELECT order_num FROM OrderItems 
                                            WHERE prod_id = 'RGAN101'));

Subquery SELECT statements can only retrieve a single column. Attempting to retrieve multiple columns will return an error.










Chapter 4 Join的使用和进阶



Lecture 4.1 Join的灵活使用1(inner join)

A join is a mechanism used to associate tables within a SELECT statement

        SELECT vend_name, prod_name, prod_price 
        FROM Vendors, Products 
        WHERE Vendors.vend_id = Products.vend_id     <--- join condition

The WHERE clause acts as a filter to only include rows that match the specified filter condition. 

Without join condition, Cartesion Product will be generated - number of rows retrieved will be the number of rows in the first table 
multiplied by the number of rows in the second table.

In all types of joins, SQL generates a Cartesian Product first, then eliminates the rows that do not meet the criteria. 



Inner Join 定义: Only returns the rows that match across all tables

Two forms:

SELECT * FROM Vendors, Products
WHERE Vendors.vend_id = Products.vend_id;

SELECT * FROM Vendors JOIN Products
WHERE Vendors.vend_id = Products.vend_id;


Join multiple tables:

SELECT prod_name, vend_name, prod_price, quantity FROM OrderItems, Products, Vendors
WHERE Products.vend_id = Vendors.vend_id
AND OrderItems.prod_id = Products.prod_id
AND order_num = 20007;


Using Join is more efficient than subqueries. 




Lecture 4.2 Join的灵活使用2(left, right, outer)


Ex. SELECT cust_name, cust_contact 
        FROM Customers, Orders, OrderItems
        WHERE Customers.cust_id = Orders.cust_id
        AND OrderItems.order_num = Orders.order_num
        AND prod_id = 'RGAN01';

---- Join multiple tables
SELECT cust_name, cust_contact 
        FROM Customers JOIN Orders ON Customers.cust_id = Orders.cust_id
        JOIN OrderItems ON OrderItems.order_num = Orders.order_num
        WHERE prod_id = 'RGAN01';


Use Table Aliases
We can use aliases for column names and calculated fields, SQL also enables you to alias table names. 
·To shorten the SQL syntax
·To enable multiple uses of the same table within a single SELECT statement


SELECT C.cust_id,cust_name,cust_contact
	FROM Customers AS C, Orders AS O, OrderItems AS OI
	WHERE C.cust_id = O.cust_id
	AND OI.order_num = O.order_num
	AND prod_id = 'RGAN01';











Chapter 5: SQL的高阶应用


Lecture 5.1 对表格进行更改添加删除操作


Insert Into 添加数据
·Insert a single complete row
·Insert a single partial row
·Insert the result of a query

Example: INSERT INTO Customers
         VALUES
         ('100000006', 'Toy Land', '123 Any Street', 'New York', 'NY', 'NULL', 'NULL');

Example: insert into Customers
(cust_id,
cust_name,
cust_address,cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,cust_email)
select
cust_id,
cust_name,
cust_address,cust_city,
cust_state,
cust_zip,
cust_country,
cust_contact,cust_email
from CustNew;
（创建表格加入表)


Update 更新数据
·To update specific rows in a table
·Tp update all rows in a table
  Example: UPDATE customers SET cust_email = 'kim@gmail.com'
           WHERE cust_id = '1000000005'
·Without WHERE clause, the database will update all rows.


Delete 删除数据
·To delete specific rows from a table
·To delte all rows from a atable
Ex. DELETE FROM Customers WHERE cust_id = 'Toy Land2';

It only deletes rows from the table, but never deltes the table itself.


Create Table 创建表格
Ex. CREATE TABLE new_c AS 
        SELECT * FROM customers


Drop Table 移除表格
Ex. DROP TABLE new_c;
Ex. drop table if exists new_customers;


Derived Table 嵌套query创建临时表格
Ex. SELECT a.vend_id, b.vend_city  FROM 
(SELECT vend_id, COUNT(*) AS num_prods
	FROM Products
	WHERE prod_price >= 4
	GROUP BY vend_id
    Having num_prods >=2
    order by num_prods) AS A
    left join
Vendors as b
on a.vend_id=b.vend_id;

每个derive table必须要有名字



 
Lecture 5.2 - 高级应用-Window Function

MySQL 8.0.2 introduces SQL window functions, or analytic functions as they are also sometimes called.

WINDOW_FUNCTION_NAME(expression)
        OVER(
                [PARTITION DEFINITION]
                [ORDER_DEFINITION]
        )

If the OVER Clause is empty, which treats the entire set of query rows as a single partition.
If the OVER clause partitions rows by certain things, producing a sum per partition.


ROW_NUMBER() Window Function
可以使用row number去dedupe，去掉重复项

Ex. SELECT cust_id, 
order_date, 
ROW_NUMBER() OVER (PARTITION BY cust_id ORDER BY order_date desc) AS row_num 
FROM Orders;

选择cust_id和order_date, 使用row number函数，以cust_id作为分类，以日期作为排序，找到row number
之后可以筛选row number为1的，找到每个id用户最近的交易。









Chapter 6: SQL的高阶应用-CTE(common table expression)

Lecture6.1 使用with语句创建简单的通用表

